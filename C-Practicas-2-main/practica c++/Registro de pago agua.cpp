#include <iostream> #include <vector> #include <string> #include <fstream> #include <algorithm> using namespace std; class Contribuyente { public: string nombre; string clasificacion; vector<int> historialConsumo; Contribuyente(string nombre, string clasificacion) { this->nombre = nombre; this->clasificacion = clasificacion; } void agregarConsumo(int consumo) { historialConsumo.push_back(consumo); } void mostrarHistorial() { cout << "Historial de consumo de " << nombre << " (" << clasificacion << "):" << endl; for (int consumo : historialConsumo) { cout << consumo << " "; } cout << endl; } int consumoTotal() { return accumulate(historialConsumo.begin(), historialConsumo.end(), 0); } void actualizarClasificacion() { int totalConsumo = consumoTotal(); if (totalConsumo < 100) { clasificacion = "Moroso"; } else if (totalConsumo < 200) { clasificacion = "Regular"; } else { clasificacion = "Responsable"; } } }; void leerDatosDesdeArchivo(vector<Contribuyente>& contribuyentes, const string& nombreArchivo) { ifstream archivo(nombreArchivo); if (archivo.is_open()) { string nombre, clasificacion; int consumo; while (archivo >> nombre >> clasificacion) { Contribuyente contribuyente(nombre, clasificacion); while (archivo >> consumo && consumo != -1) { contribuyente.agregarConsumo(consumo); } contribuyentes.push_back(contribuyente); } archivo.close(); } else { cout << "No se pudo abrir el archivo." << endl; } } void calcularEstadisticas(const vector<Contribuyente>& contribuyentes) { int totalConsumo = 0; for (const Contribuyente& contribuyente : contribuyentes) { totalConsumo += contribuyente.consumoTotal(); } cout << "Consumo total de todos los contribuyentes: " << totalConsumo << endl; cout << "Consumo promedio por contribuyente: " << totalConsumo / contribuyentes.size() << endl; } int main() { vector<Contribuyente> contribuyentes; leerDatosDesdeArchivo(contribuyentes, "datos.txt"); for (Contribuyente& contribuyente : contribuyentes) { contribuyente.actualizarClasificacion(); contribuyente.mostrarHistorial(); } calcularEstadisticas(contribuyentes); return 0; }

#include <iostream> #include <vector> #include <string> #include <fstream> #include <algorithm> using namespace std; class Contribuyente { public: string nombre; string clasificacion; vector<int> historialConsumo; Contribuyente(string nombre, string clasificacion) { this->nombre = nombre; this->clasificacion = clasificacion; } void agregarConsumo(int consumo) { historialConsumo.push_back(consumo); } void mostrarHistorial() { cout << "Historial de consumo de " << nombre << " (" << clasificacion << "):" << endl; for (int consumo : historialConsumo) { cout << consumo << " "; } cout << endl; } int consumoTotal() { return accumulate(historialConsumo.begin(), historialConsumo.end(), 0); } void actualizarClasificacion() { int totalConsumo = consumoTotal(); if (totalConsumo < 100) { clasificacion = "Moroso"; } else if (totalConsumo < 200) { clasificacion = "Regular"; } else { clasificacion = "Responsable"; } } }; void leerDatosDesdeArchivo(vector<Contribuyente>& contribuyentes, const string& nombreArchivo) { ifstream archivo(nombreArchivo); if (archivo.is_open()) { string nombre, clasificacion; int consumo; while (archivo >> nombre >> clasificacion) { Contribuyente contribuyente(nombre, clasificacion); while (archivo >> consumo && consumo != -1) { contribuyente.agregarConsumo(consumo); } contribuyentes.push_back(contribuyente); } archivo.close(); } else { cout << "No se pudo abrir el archivo." << endl; } } void calcularEstadisticas(const vector<Contribuyente>& contribuyentes) { int totalConsumo = 0; for (const Contribuyente& contribuyente : contribuyentes) { totalConsumo += contribuyente.consumoTotal(); } cout << "Consumo total de todos los contribuyentes: " << totalConsumo << endl; cout << "Consumo promedio por contribuyente: " << totalConsumo / contribuyentes.size() << endl; } int main() { vector<Contribuyente> contribuyentes; leerDatosDesdeArchivo(contribuyentes, "datos.txt"); for (Contribuyente& contribuyente : contribuyentes) { contribuyente.actualizarClasificacion(); contribuyente.mostrarHistorial(); } calcularEstadisticas(contribuyentes); return 0; }
